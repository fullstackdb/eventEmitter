

class EventListener {
    constructor(subject) {
        this.subject = subject;
    }

    when(eventName, callback) {
        return this.subject.addListener(eventName, (data) => {
            callback(data);
        });
    }
}

class EventEmitter {
    constructor() {
        this.listeners = new Map();
    }
    addListener(label, callback) {
        this.listeners.has(label) || this.listeners.set(label, []);
        this.listeners.get(label).push(callback);
    }
    removeListener(label, callback) {
        let isFunction = (obj) => typeof obj == 'function' || false,
            listeners = this.listeners.get(label),
            index;

        if (listeners && listeners.length) {
            index = listeners.reduce((i, listener, index) => {
                return (isFunction(listener) && listener === callback) ?
                    i = index :
                    i;
            }, -1);

            if (index > -1) {
                listeners.splice(index, 1);
                this.listeners.set(label, listeners);
                return true;
            }
        }
        return false;
    }
    emit(label, ...args) {
        let listeners = this.listeners.get(label);
        if (listeners && listeners.length) {
            listeners.forEach((listener) => {
                listener(...args);
            });
            return true;
        }
        return false;
    }
}

class EventGateway {
    constructor() {
        this.eventEmitter = new EventEmitter();
        this.eventListeners = new EventListener(this.eventEmitter);
    }

    emit(eventName, data) {
        this.eventEmitter.emit(eventName, data)
    }

    when(eventName, callback) {
        return this.eventListeners.when(eventName, callback);
    }
}


export default function() {
    return new EventGateway();
};
